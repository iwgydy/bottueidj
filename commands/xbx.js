const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

// ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
const loginsFilePath = path.join(__dirname, '../data/looks.json');

/** ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á userId (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) */
function getUserLogin(userId) {
  if (fs.existsSync(loginsFilePath)) {
    const logins = JSON.parse(fs.readFileSync(loginsFilePath, 'utf8'));
    return logins.find((login) => login.userId === userId);
  }
  return null;
}

/** ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô looks.json */
function saveUserLogin(logData) {
  let logins = [];
  if (fs.existsSync(loginsFilePath)) {
    logins = JSON.parse(fs.readFileSync(loginsFilePath, 'utf8'));
  }
  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á userId ‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å
  logins = logins.filter((login) => login.userId !== logData.userId);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
  logins.push(logData);

  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
  fs.writeFileSync(loginsFilePath, JSON.stringify(logins, null, 2));
}

module.exports = {
  name: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î',
  description: '‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î V2Ray',
  execute(bot) {
    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    let waitingForURL = {};
    let waitingForUsername = {};
    let waitingForPassword = {};

    let waitingForID = {};
    let waitingForName = {};
    let waitingForGB = {};
    let waitingForDays = {};

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    let codeInfo = {};

    /** 
     * ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå /‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
     */
    bot.onText(/\/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const savedLogin = getUserLogin(userId);

      if (!savedLogin) {
        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -> ‡∏ñ‡∏≤‡∏° URL, username, password
        bot.sendMessage(chatId, "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà **URL** (‡πÄ‡∏ä‡πà‡∏ô http://example.com):");
        waitingForURL[userId] = true;
      } else {
        // ‡∏°‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß -> ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà **URL** (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: http://example.com) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà:");
        waitingForURL[userId] = true;
      }
    });

    /**
     * ‡∏ü‡∏±‡∏á message ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÉ‡∏î
     */
    bot.on('message', async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      const text = msg.text;

      // ----- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô -----
      // 1) ‡∏ñ‡∏≤‡∏° URL
      if (waitingForURL[userId]) {
        codeInfo[userId] = {
          url: text.trim(), // ‡πÄ‡∏Å‡πá‡∏ö URL
        };
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà **username** ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:");
        waitingForURL[userId] = false;
        waitingForUsername[userId] = true;
        return;
      }

      // 2) ‡∏ñ‡∏≤‡∏° username
      if (waitingForUsername[userId]) {
        codeInfo[userId].username = text.trim();
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà **password** ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:");
        waitingForUsername[userId] = false;
        waitingForPassword[userId] = true;
        return;
      }

      // 3) ‡∏ñ‡∏≤‡∏° password
      if (waitingForPassword[userId]) {
        codeInfo[userId].password = text.trim();

        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö password ‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á "‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô" ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        waitingForPassword[userId] = false;

        const loginURL = `${codeInfo[userId].url}/login`; // ‡πÄ‡∏ä‡πà‡∏ô http://example.com/login

        // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô...
        bot.sendMessage(chatId, "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...");

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        try {
          const res = await axios.post(loginURL, {
            username: codeInfo[userId].username,
            password: codeInfo[userId].password,
          });
          const data = res.data;
          if (data.success) {
            // ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à -> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            saveUserLogin({
              userId,
              url: codeInfo[userId].url,
              username: codeInfo[userId].username,
              password: codeInfo[userId].password,
            });
            bot.sendMessage(chatId, `‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data.msg}`);

            // ‡πÑ‡∏õ‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
            bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà **ID** (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 5):");
            waitingForID[userId] = true;
          } else {
            // ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            bot.sendMessage(chatId, `‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data.msg}`);
            // ‡∏à‡∏ö‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
            delete codeInfo[userId];
          }
        } catch (err) {
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
          bot.sendMessage(chatId, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏ì‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô");
          console.error(err.message);
          delete codeInfo[userId];
        }
        return;
      }

      // ----- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î (‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß) -----
      // 4) ‡∏ñ‡∏≤‡∏° ID
      if (waitingForID[userId]) {
        const parsedID = parseInt(text, 10);
        if (isNaN(parsedID) || parsedID <= 0) {
          bot.sendMessage(chatId, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
          return;
        }
        codeInfo[userId].id = parsedID;
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:");
        waitingForID[userId] = false;
        waitingForName[userId] = true;
        return;
      }

      // 5) ‡∏ñ‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î
      if (waitingForName[userId]) {
        codeInfo[userId].name = text.trim();
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î **GB** (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 50):");
        waitingForName[userId] = false;
        waitingForGB[userId] = true;
        return;
      }

      // 6) ‡∏ñ‡∏≤‡∏° GB
      if (waitingForGB[userId]) {
        const gb = parseInt(text, 10);
        if (isNaN(gb) || gb <= 0) {
          bot.sendMessage(chatId, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î GB ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0:");
          return;
        }
        codeInfo[userId].gb = gb;
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô **‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏** (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 30):");
        waitingForGB[userId] = false;
        waitingForDays[userId] = true;
        return;
      }

      // 7) ‡∏ñ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      if (waitingForDays[userId]) {
        const days = parseInt(text, 10);
        if (isNaN(days) || days <= 0) {
          bot.sendMessage(chatId, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0:");
          return;
        }
        codeInfo[userId].days = days;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á UUID ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        const uuid = uuidv4();
        const expiryTime = Math.floor(Date.now() / 1000) + days * 24 * 60 * 60;

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
        const addClientURL = `${codeInfo[userId].url}/panel/api/inbounds/addClient`;
        const settings = {
          method: 'POST',
          url: addClientURL,
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
          },
          data: {
            id: codeInfo[userId].id,
            settings: JSON.stringify({
              clients: [
                {
                  id: uuid,
                  flow: '',
                  email: codeInfo[userId].name,
                  limitIp: 0,
                  totalGB: codeInfo[userId].gb,
                  expiryTime: expiryTime,
                  enable: true,
                  tgId: userId,
                  subId: uuidv4(),
                  reset: 0,
                },
              ],
            }),
          },
        };

        bot.sendMessage(chatId, "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...");

        try {
          await axios(settings);

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå vless
          const link = `vless://${uuid}@facebookbotvip.vipv2boxth.xyz:433?type=ws&path=%2F&host=&security=tls&fp=chrome&alpn=&allowInsecure=1&sni=fbcdn.net#${encodeURIComponent(
            codeInfo[userId].name
          )}`;

          bot.sendMessage(chatId, `‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüîó ‡∏•‡∏¥‡∏á‡∏Å‡πå:\n${link}`);
        } catch (error) {
          bot.sendMessage(chatId, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
          console.error(error.message);
        }

        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        delete codeInfo[userId];
        delete waitingForDays[userId];
      }
    });
  },
};
