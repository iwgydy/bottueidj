/**
 * ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
 * - ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏à‡∏∞‡∏ñ‡∏≤‡∏° URL, username, password)
 * - ‡∏ñ‡∏≤‡∏° ID, ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î, GB, ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
 * - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î Vless ‡∏û‡∏£‡πâ‡∏≠‡∏° UUID
 */

const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

// ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
const loginsFilePath = path.join(__dirname, '../data/looks.json');

/** 
 * ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏´‡∏≤‡∏Å‡∏°‡∏µ)
 */
function getUserLogin(userId) {
  if (fs.existsSync(loginsFilePath)) {
    const logins = JSON.parse(fs.readFileSync(loginsFilePath, 'utf8'));
    return logins.find(login => login.userId === userId);
  }
  return null;
}

/** 
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå looks.json
 */
function saveUserLogin(logData) {
  let logins = [];
  if (fs.existsSync(loginsFilePath)) {
    logins = JSON.parse(fs.readFileSync(loginsFilePath, 'utf8'));
  }

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  logins = logins.filter(login => login.userId !== logData.userId);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà
  logins.push(logData);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
  fs.writeFileSync(loginsFilePath, JSON.stringify(logins, null, 2));
}

module.exports = {
  name: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î',
  description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î V2Ray ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏≤‡∏° ID',
  execute(bot) {
    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    let waitingForURL = {};      
    let waitingForUsername = {};
    let waitingForPassword = {};
    let waitingForID = {};
    let waitingForName = {};
    let waitingForGB = {};
    let waitingForDays = {};

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô
    let codeInfo = {};

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå /‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
    bot.onText(/\/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î/, (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const savedLogin = getUserLogin(userId);
      if (!savedLogin) {
        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô -> ‡∏Ç‡∏≠ URL, username, password
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á **URL** API ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô http://example.com):");
        waitingForURL[userId] = true;
      } else {
        // ‡πÄ‡∏Ñ‡∏¢‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß -> ‡∏Ç‡∏≠ ID
        codeInfo[userId] = { ...savedLogin }; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà **ID** (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 5):");
        waitingForID[userId] = true;
      }
    });

    // ‡∏ü‡∏±‡∏á‡∏ó‡∏∏‡∏Å message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    bot.on('message', (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      const text = msg.text;

      // 1) ‡∏ñ‡∏≤‡∏° URL
      if (waitingForURL[userId]) {
        codeInfo[userId] = { url: text }; // ‡πÄ‡∏Å‡πá‡∏ö URL ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà **username** ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:");
        waitingForURL[userId] = false;
        waitingForUsername[userId] = true;
        return;
      }

      // 2) ‡∏ñ‡∏≤‡∏° username
      if (waitingForUsername[userId]) {
        codeInfo[userId].username = text;
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà **password** ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:");
        waitingForUsername[userId] = false;
        waitingForPassword[userId] = true;
        return;
      }

      // 3) ‡∏ñ‡∏≤‡∏° password
      if (waitingForPassword[userId]) {
        codeInfo[userId].password = text;

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        saveUserLogin({
          userId,
          url: codeInfo[userId].url,
          username: codeInfo[userId].username,
          password: codeInfo[userId].password,
        });

        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à -> ‡∏Ç‡∏≠ ID
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà **ID** (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 5):");
        waitingForPassword[userId] = false;
        waitingForID[userId] = true;
        return;
      }

      // 4) ‡∏ñ‡∏≤‡∏° ID
      if (waitingForID[userId]) {
        const idNum = parseInt(text, 10);
        if (isNaN(idNum) || idNum <= 0) {
          bot.sendMessage(chatId, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
          return;
        }
        codeInfo[userId].id = idNum;
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:");
        waitingForID[userId] = false;
        waitingForName[userId] = true;
        return;
      }

      // 5) ‡∏ñ‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î
      if (waitingForName[userId]) {
        codeInfo[userId].name = text;
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î **GB** (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 50):");
        waitingForName[userId] = false;
        waitingForGB[userId] = true;
        return;
      }

      // 6) ‡∏ñ‡∏≤‡∏° GB
      if (waitingForGB[userId]) {
        const gb = parseInt(text, 10);
        if (isNaN(gb) || gb <= 0) {
          bot.sendMessage(chatId, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î GB ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0:");
          return;
        }
        codeInfo[userId].gb = gb;
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô **‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏** (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 30):");
        waitingForGB[userId] = false;
        waitingForDays[userId] = true;
        return;
      }

      // 7) ‡∏ñ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      if (waitingForDays[userId]) {
        const days = parseInt(text, 10);
        if (isNaN(days) || days <= 0) {
          bot.sendMessage(chatId, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0:");
          return;
        }
        codeInfo[userId].days = days;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á UUID ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        const uuid = uuidv4();
        const expiryTime = Math.floor(Date.now() / 1000) + days * 24 * 60 * 60;

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
        const fullURL = `${codeInfo[userId].url}/panel/api/inbounds/addClient`;

        const settings = {
          method: 'POST',
          url: fullURL,
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
          },
          data: {
            id: codeInfo[userId].id,
            settings: JSON.stringify({
              clients: [
                {
                  id: uuid,
                  flow: '',
                  email: codeInfo[userId].name,
                  limitIp: 0,
                  totalGB: codeInfo[userId].gb,
                  expiryTime: expiryTime,
                  enable: true,
                  tgId: userId,
                  subId: uuidv4(),
                  reset: 0,
                },
              ],
            }),
          },
        };

        // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
        bot.sendMessage(chatId, "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...");

        axios(settings)
          .then(() => {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå vless
            const link = `vless://${uuid}@facebookbotvip.vipv2boxth.xyz:433?type=ws&path=%2F&host=&security=tls&fp=chrome&alpn=&allowInsecure=1&sni=fbcdn.net#${encodeURIComponent(
              codeInfo[userId].name
            )}`;
            bot.sendMessage(chatId, `‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüîó ‡∏•‡∏¥‡∏á‡∏Å‡πå:\n${link}`);
          })
          .catch((error) => {
            bot.sendMessage(chatId, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
            console.error(error.message);
          });

        // ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
        delete waitingForDays[userId];
        delete codeInfo[userId];
      }
    });
  },
};
