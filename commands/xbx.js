const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

const loginsFilePath = path.join(__dirname, '../data/looks.json');

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
function getUserLogin(userId) {
  if (fs.existsSync(loginsFilePath)) {
    const logins = JSON.parse(fs.readFileSync(loginsFilePath, 'utf8'));
    return logins.find((login) => login.userId === userId);
  }
  return null;
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
 */
function saveUserLogin(logData) {
  let logins = [];
  if (fs.existsSync(loginsFilePath)) {
    logins = JSON.parse(fs.readFileSync(loginsFilePath, 'utf8'));
  }

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏ã‡πâ‡∏≥
  logins = logins.filter((login) => login.userId !== logData.userId);

  logins.push(logData);
  fs.writeFileSync(loginsFilePath, JSON.stringify(logins, null, 2));
}

module.exports = {
  name: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î',
  description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î V2Ray ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
  execute(bot) {
    let userSteps = {};

    bot.onText(/\/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î/, (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;

      const savedLogin = getUserLogin(userId);

      if (!savedLogin) {
        // ‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏Ç‡∏≠ URL, username, password ‡∏Å‡πà‡∏≠‡∏ô
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å **URL API** (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: http://xxxxx.xyz:2053/xxxxxx):");
        userSteps[userId] = { step: 'waitingForURL' };
      } else {
        // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠ Inbound ID ‡∏ï‡πà‡∏≠‡πÄ‡∏•‡∏¢
        bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Inbound ID (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 5):");
        userSteps[userId] = {
          step: 'waitingForInboundId',
          login: savedLogin, // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        };
      }
    });

    bot.on('message', (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      const text = msg.text.trim();

      if (!userSteps[userId]) return;

      const step = userSteps[userId].step;

      switch (step) {
        case 'waitingForURL':
          userSteps[userId].login = { url: text };
          bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å **username**:");
          userSteps[userId].step = 'waitingForUsername';
          break;

        case 'waitingForUsername':
          userSteps[userId].login.username = text;
          bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å **password**:");
          userSteps[userId].step = 'waitingForPassword';
          break;

        case 'waitingForPassword':
          userSteps[userId].login.password = text;

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
          saveUserLogin({
            userId,
            ...userSteps[userId].login,
          });

          // ‡∏Ç‡∏≠ inbound ID ‡∏ï‡πà‡∏≠‡πÄ‡∏•‡∏¢
          bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Inbound ID (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 5):");
          userSteps[userId].step = 'waitingForInboundId';
          break;

        case 'waitingForInboundId': {
          const inboundId = parseInt(text, 10);
          if (isNaN(inboundId) || inboundId <= 0) {
            bot.sendMessage(chatId, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Inbound ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0:");
            return;
          }
          userSteps[userId].inboundId = inboundId;
          bot.sendMessage(chatId, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î (email) ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:");
          userSteps[userId].step = 'waitingForName';
          break;
        }

        case 'waitingForName':
          userSteps[userId].name = text;
          bot.sendMessage(chatId, "‡∏Å‡∏≥‡∏´‡∏ô‡∏î GB (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 50):");
          userSteps[userId].step = 'waitingForGB';
          break;

        case 'waitingForGB': {
          const gb = parseInt(text, 10);
          if (isNaN(gb) || gb <= 0) {
            bot.sendMessage(chatId, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ GB ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0:");
            return;
          }
          userSteps[userId].gb = gb;
          bot.sendMessage(chatId, "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 30):");
          userSteps[userId].step = 'waitingForDays';
          break;
        }

        case 'waitingForDays': {
          const days = parseInt(text, 10);
          if (isNaN(days) || days <= 0) {
            bot.sendMessage(chatId, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0:");
            return;
          }
          userSteps[userId].days = days;

          const { login, inboundId, name, gb } = userSteps[userId];
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á UUID
          const newUUID = uuidv4();
          // ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
          const expiryTime = Math.floor(Date.now() / 1000) + days * 24 * 3600;

          // ‡πÄ‡∏û‡∏¥‡πà‡∏° `/panel/api/inbounds/addClient` ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          const finalURL = `${login.url}/panel/api/inbounds/addClient`;

          bot.sendMessage(chatId, "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î... (‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)");

          const settings = {
            method: 'POST',
            url: finalURL,
            headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json',
            },
            data: {
              id: inboundId, // inbound ID
              settings: JSON.stringify({
                clients: [
                  {
                    id: newUUID,
                    flow: '',
                    email: name,
                    limitIp: 0,
                    totalGB: gb,
                    expiryTime: expiryTime,
                    enable: true,
                    tgId: userId,
                    subId: uuidv4(),
                    reset: 0,
                  },
                ],
              }),
            },
          };

          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
          axios(settings)
            .then(() => {
              // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå vless://
              const link = `vless://${newUUID}@facebookbotvip.vipv2boxth.xyz:433?type=ws&path=%2F&host=&security=tls&fp=chrome&alpn=&allowInsecure=1&sni=fbcdn.net#${encodeURIComponent(
                name
              )}`;
              bot.sendMessage(chatId, `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüîó ‡∏•‡∏¥‡∏á‡∏Å‡πå: ${link}`);
            })
            .catch((err) => {
              console.error("Error creating client:", err.message);
              bot.sendMessage(chatId, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î");
            });

          // ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
          delete userSteps[userId];
          break;
        }

        default:
          // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
          delete userSteps[userId];
      }
    });
  },
};
