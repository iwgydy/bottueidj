const axios = require('axios');
const { v4: uuidv4 } = require('uuid'); // ‡πÉ‡∏ä‡πâ library ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á UUID

module.exports = {
  name: 'v2ray',
  description: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ V2Ray',
  execute(bot) {
    const V2RAY_LOGIN_URL = 'http://creators.trueid.net.vipv2boxth.xyz:2053/13RpDPnN59mBvxd/login';
    const V2RAY_ADD_CLIENT_URL = 'http://creators.trueid.net.vipv2boxth.xyz:2053/13RpDPnN59mBvxd/panel/api/inbounds/addClient';
    const DEFAULT_USERNAME = 'WYEXPRkCKL';
    const DEFAULT_PASSWORD = 'nfEpAlava1';

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    const v2rayLogin = async () => {
      const settings = {
        method: 'POST',
        url: V2RAY_LOGIN_URL,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        data: new URLSearchParams({
          username: DEFAULT_USERNAME,
          password: DEFAULT_PASSWORD,
        }),
      };

      try {
        const response = await axios(settings);
        return response.data;
      } catch (error) {
        console.error('Error during V2Ray login:', error.message);
        throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå V2Ray ‡πÑ‡∏î‡πâ');
      }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà
    const createV2RayClient = async (name, expiryDays, totalGB) => {
      const uuid = uuidv4();
      const expiryTime = Math.floor(Date.now() / 1000) + expiryDays * 24 * 60 * 60; // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤ expiry ‡πÄ‡∏õ‡πá‡∏ô timestamp

      const clientData = {
        id: 2,
        settings: JSON.stringify({
          clients: [
            {
              id: uuid,
              flow: "",
              email: name,
              limitIp: 0,
              totalGB: totalGB,
              expiryTime: expiryTime,
              enable: true,
              tgId: "",
              subId: "2rv0gb458kbfl532",
              reset: 0,
            },
          ],
        }),
      };

      try {
        const response = await axios.post(V2RAY_ADD_CLIENT_URL, clientData, {
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
          },
        });
        return response.data;
      } catch (error) {
        console.error('Error during V2Ray client creation:', error.message);
        throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ');
      }
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /v2raycreate
    bot.onText(/\/v2raycreate (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const args = match[1].split(' '); // ‡πÅ‡∏¢‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
      const [name, expiryDays, totalGB] = args;

      if (!name || !expiryDays || !totalGB) {
        return bot.sendMessage(chatId, '‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏: ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ß‡∏±‡∏ô) ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô GB ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: /v2raycreate mycode 30 100');
      }

      bot.sendMessage(chatId, 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà V2Ray...');
      try {
        const loginResult = await v2rayLogin();
        if (!loginResult.success) {
          return bot.sendMessage(chatId, `‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${loginResult.msg}`);
        }

        bot.sendMessage(chatId, 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î...');
        const createResult = await createV2RayClient(name, parseInt(expiryDays, 10), parseInt(totalGB, 10));
        bot.sendMessage(chatId, `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: \n- ‡∏ä‡∏∑‡πà‡∏≠: ${name}\n- UUID: ${createResult.clients[0].id}\n- ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${expiryDays} ‡∏ß‡∏±‡∏ô\n- GB: ${totalGB} GB`);
      } catch (error) {
        bot.sendMessage(chatId, error.message);
      }
    });
  },
};
