const fs = require('fs');
const path = require('path');

module.exports = {
  name: 'slot',
  description: '‡πÄ‡∏Å‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÑ‡∏î‡πâ',
  execute(bot) {
    const filePath = path.join(__dirname, 'smo.json');

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå smo.json
    function loadOrCreateFile() {
      if (!fs.existsSync(filePath)) {
        fs.writeFileSync(filePath, JSON.stringify({}, null, 2));
      }
      const data = fs.readFileSync(filePath);
      return JSON.parse(data);
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô smo.json
    function saveToFile(data) {
      fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ä‡∏ô‡∏∞ (50/50)
    function isWin() {
      return Math.random() < 0.5; // 50% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ä‡∏ô‡∏∞
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï
    function spinSlot() {
      const symbols = ['üçí', 'üçã', 'üçâ', '‚≠ê', 'üíé', 'üçá'];
      return Array.from({ length: 3 }, () =>
        Array.from({ length: 3 }, () => symbols[Math.floor(Math.random() * symbols.length)])
      );
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
    function calculateReward(grid, bet) {
      const payout = {
        'üçí': 1.1,
        'üçã': 1.5,
        'üçâ': 2.0,
        '‚≠ê': 5.0,
        'üíé': 10.0,
        'üçá': 3.0,
      };

      let reward = 0;

      if (grid[1][0] === grid[1][1] && grid[1][1] === grid[1][2]) {
        reward = payout[grid[1][0]] * bet;
      }

      return parseFloat(reward.toFixed(2));
    }

    // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /slot (‡πÄ‡∏â‡∏¢ ‡πÜ)
    bot.onText(/\/slot$/, (msg) => {
      bot.sendMessage(
        msg.chat.id,
        "üé∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô `/slot 5` (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ñ‡∏∑‡∏≠ 1 ‡∏ö‡∏≤‡∏ó)",
        { parse_mode: 'Markdown' }
      );
    });

    // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /slot <‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô>
    bot.onText(/\/slot (\d+(\.\d{1,2})?)/, async (msg, match) => {
      try {
        const userId = msg.from.id;
        const chatId = msg.chat.id;
        const bet = parseFloat(match[1]);

        if (isNaN(bet) || bet <= 0) {
          return bot.sendMessage(chatId, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
        }

        const data = loadOrCreateFile();

        if (!data[userId]) {
          data[userId] = { balance: 10 };
          saveToFile(data);
        }

        const userBalance = data[userId].balance;

        if (userBalance < bet) {
          return bot.sendMessage(chatId, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô");
        }

        data[userId].balance -= bet;
        saveToFile(data);

        let message = await bot.sendMessage(chatId, "üé∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏°‡∏∏‡∏ô‡∏™‡∏•‡πá‡∏≠‡∏ï...");

        const spinSteps = [
          "| üçí | üçã | üçâ |",
          "| üçã | ‚≠ê | üçâ |",
          "| ‚≠ê | üíé | üçí |",
          "| üíé | üçá | üçâ |"
        ];

        for (let i = 0; i < spinSteps.length; i++) {
          await new Promise((resolve) => setTimeout(resolve, 1000));
          await bot.editMessageText(`üé∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏°‡∏∏‡∏ô...\n${spinSteps[i]}`, {
            chat_id: chatId,
            message_id: message.message_id,
          });
        }

        const grid = spinSlot();
        const win = isWin(); // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏û‡πâ

        let reward = 0;
        if (win) {
          reward = calculateReward(grid, bet);
          data[userId].balance += reward;
          saveToFile(data);
        }

        const slotResult = `
üé∞ **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏™‡∏•‡πá‡∏≠‡∏ï** üé∞
\`\`\`
| ${grid[0][0]} | ${grid[0][1]} | ${grid[0][2]} |
| ${grid[1][0]} | ${grid[1][1]} | ${grid[1][2]} |  <<<<<
| ${grid[2][0]} | ${grid[2][1]} | ${grid[2][2]} |
\`\`\`

${win ? `üéâ **‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ${reward.toFixed(2)} ‡∏ö‡∏≤‡∏ó!**` : 'üò¢ **‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ**'}

üí∞ **‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠**: ${data[userId].balance.toFixed(2)} ‡∏ö‡∏≤‡∏ó
        `;

        await bot.editMessageText(slotResult, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown',
        });
      } catch (error) {
        console.error("Error in /slot command:", error.message);
        bot.sendMessage(msg.chat.id, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏•‡πá‡∏≠‡∏ï");
      }
    });
  },
};
